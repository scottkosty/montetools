% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monte-carlo.R
\name{mc_reproduce}
\alias{mc_reproduce}
\title{Reproduce all, or the first 'nsims' of an MC}
\usage{
mc_reproduce(
  mc,
  nsims = get_nsims_vec(mc),
  reproduce_poi = TRUE,
  stop_if_unequal = TRUE,
  check_nonconstant = NULL,
  restore_globals = TRUE,
  verbose = 1,
  ...
)
}
\arguments{
\item{mc}{An MC object (e.g., created from mc_run).}

\item{nsims}{The number of sims to reproduce (by default, all).}

\item{reproduce_poi}{Logical for whether to reproduce the POI. Useful mainly in cases where the dgpp_to_poi is stochastic.}

\item{stop_if_unequal}{Stop immediately if a pn-chunk is not the same. i.e., don't wait until after all (potentially computationally intensive) pn-chunks are processed to check equality.}

\item{check_nonconstant}{If TRUE, check that there is non-zero variation in the simulation results within at least one pn-pair. If there is no variation, this could suggest there's a problem, i.e., that the reproduction you're doing does not imply something useful. For example, when the MC statistic is a p-value, and if all of the statistic values are all 0, then that suggests you might want to try to reproduce some of the simulations where the p-value is different. The check does not give a warning when 'nsims' is 1 because it the user likely knows that they are not reproducing a diverse subset. The default is to perform the check when reproducing a proper subset and when there does exist variation in the super set (the original MC).}

\item{restore_globals}{logical for whether to restore the globals that were captured (if the argument 'store_globals' was TRUE) by mc_run().}

\item{verbose}{An integer (default of 1) to control the level feedback. Set to 0 to turn off messages that are not warnings or errors. At value 1, basic progress information is printed; at values 2 and higher, increasingly more messages are printed that are useful when debugging an unexpected result.}

\item{...}{Arguments to pass to mc_run() (e.g., "parallel = TRUE").}
}
\description{
Reproduce all, or the first 'nsims' of an MC
}
\details{
mc_reproduce() restores the .Random.seed from before it is run. If we don't restore, the following is a bit weird: If the user runs mc_reproduce(mcx); abc <- rnorm(1); mc_reproduce(mcx); def <- rnorm(1), then abc would be equal to def. Instead of restoring, we could just reinitialize the seed, but we might as well make mc_reproduce() just not affect the seed.
}
